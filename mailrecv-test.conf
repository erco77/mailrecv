# mailrecv's config file.

#     domain <domain_name>
#
#     Sets the domain name for this server to know itself as.
#
domain example.com

#      deliver mail_to <email_address> append <filename>
#
#      Delivers mail sent to <email_address> by appending the letter to <filename>.
#      Example:
#
deliver mail_to test@example.com append /tmp/test.txt

#     deliver mail_to <email_address> shell <sh_command>
#
#     Delivers mail sent to <email_address> by piping the letter to <sh_command>.
#     <sh_command> should read stdin to receive the email message.
#
#     Examples:
#
deliver mail_to pipe123@example.com shell /bin/cat > /dev/null"
deliver mail_to pipe186@example.com shell /bin/grep -n . > /tmp/pipe.txt

#     replace mail_to <regex> <new_string>
#
#     Replace the entire matching "mail_to" address "pipe123@example.com" with "xxx@example.com"
#     Useful to prevent the mail archive exposing its gateway email address.
#     The match string is a perl regex (perl regular expression), see 'man perlre'.
#
#     Example:
#
replace mail_to pipe[0-9]*@example\.com xxx@example.com

#     allow remotehost <regex>
#     allow remoteip   <regex>
#
#     Only allow connections from servers whose reverse hostname lookups/ip addresses
#     match the perl <regex> strings. The leading ^ and trailing $ are /required/ to
#     anchor the search to the beginning + end of the string. See 'man perlre'.
#
#     Examples:
#
allow remotehost ^mail[a-zA-z0-9-]*.example.com$        # e.g. "mail-f185.example.com", but NOT "mail-f185.example.com.foo.com"
allow remotehost ^mail[0-9]*.foo.com$                   # e.g. "mail002.foo.com"
allow remoteip   ^192\.168\.0\..*$                      # e.g. 192.168.0.*
allow remoteip   ^192\.16[789]\.0\..*$                  # e.g. 192.167.0.*, 192.168.0.*, 192.169.0.*
